{
    "openapi": "3.0.0",
    "info": {
        "title": "Portfolio API",
        "version": "2.0"
    },
    "paths": {
        "/api/get-weather": {
            "get": {
                "tags": [
                    "Weather"
                ],
                "summary": "Get the current weather for a given city",
                "operationId": "c05cf2e780fae51089260a0a0272d523",
                "parameters": [
                    {
                        "name": "city",
                        "in": "query",
                        "description": "The name of the city for which to retrieve the weather",
                        "required": false,
                        "example": "Aveiro"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "description": "Weather information",
                                        "properties": {
                                            "location": {
                                                "properties": {
                                                    "name": {
                                                        "description": "The name of the location",
                                                        "type": "string"
                                                    },
                                                    "region": {
                                                        "description": "The region of the location",
                                                        "type": "string"
                                                    },
                                                    "country": {
                                                        "description": "The country of the location",
                                                        "type": "string"
                                                    },
                                                    "lat": {
                                                        "description": "The latitude of the location",
                                                        "type": "number"
                                                    },
                                                    "lon": {
                                                        "description": "The longitude of the location",
                                                        "type": "number"
                                                    },
                                                    "tz_id": {
                                                        "description": "The timezone ID of the location",
                                                        "type": "string"
                                                    },
                                                    "localtime": {
                                                        "description": "The local time of the location in the format 'YYYY-MM-DD HH:mm'",
                                                        "type": "string"
                                                    },
                                                    "utc_offset": {
                                                        "description": "The UTC offset of the location in the format '+HH:mm'",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "current": {
                                                "properties": {
                                                    "temp_c": {
                                                        "description": "The temperature in Celsius",
                                                        "type": "number"
                                                    },
                                                    "temp_f": {
                                                        "description": "The temperature in Fahrenheit",
                                                        "type": "number"
                                                    },
                                                    "condition": {
                                                        "properties": {
                                                            "text": {
                                                                "description": "The weather condition",
                                                                "type": "string"
                                                            },
                                                            "icon": {
                                                                "description": "The URL of the weather icon",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid city parameter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "description": "Error message",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "projects/my-horizon": {
            "get": {
                "tags": [
                    "Record"
                ],
                "summary": "Get all Elasticdemo records",
                "operationId": "ee43c047d2ab554b80fb5d91717af661",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "readOnly": "true",
                                                        "example": "1"
                                                    },
                                                    "name": {
                                                        "description": "name",
                                                        "type": "string"
                                                    },
                                                    "street": {
                                                        "description": "address",
                                                        "type": "string",
                                                        "example": "user@gmail.com"
                                                    },
                                                    "number": {
                                                        "type": "string",
                                                        "maxLength": 10
                                                    },
                                                    "code": {
                                                        "type": "string",
                                                        "maxLength": 10,
                                                        "example": "John"
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2023-04-23T23:23:17.000000Z"
                                                    },
                                                    "updated_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2023-04-23T23:26:11.000000Z"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "quote": {
                                            "type": "string",
                                            "example": "Inspiring quote"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/get-records": {
            "get": {
                "tags": [
                    "Record"
                ],
                "summary": "Get records",
                "description": "Get records from Elasticdemo table",
                "operationId": "getRecords",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Elasticdemo"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/get-record/{id}": {
            "get": {
                "tags": [
                    "Record"
                ],
                "summary": "Get a single record",
                "description": "Returns a single record based on the provided ID",
                "operationId": "getRecord",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the record to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Record retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "true"
                                        },
                                        "record": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": "1"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "John"
                                                },
                                                "street": {
                                                    "type": "string",
                                                    "example": "123 Main St"
                                                },
                                                "number": {
                                                    "type": "string",
                                                    "example": "12345"
                                                },
                                                "code": {
                                                    "type": "string",
                                                    "example": "ABC123"
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "example": "2023-04-24T10:30:00.000000Z"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "example": "2023-04-24T10:30:00.000000Z"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Record not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Record not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/add-record": {
            "post": {
                "tags": [
                    "Record"
                ],
                "summary": "Store a new record",
                "operationId": "011d4130929634bb0d6373fd36e5c8f5",
                "requestBody": {
                    "description": "Provide record data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "street": {
                                        "type": "string",
                                        "example": "123 Main St"
                                    },
                                    "number": {
                                        "type": "string",
                                        "example": "555-1234"
                                    },
                                    "code": {
                                        "type": "string",
                                        "example": "A1B2C3"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Record created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Record created"
                                        },
                                        "record": {
                                            "$ref": "#/components/schemas/Elasticdemo"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Validation errors"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/edit-record/{id}": {
            "patch": {
                "tags": [
                    "Record"
                ],
                "summary": "Update a record",
                "description": "Update a record in the elasticdemo table.",
                "operationId": "e064816cc7ea79beded2236f8761a351",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the record to update.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New data for the record",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Elasticdemo"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Record updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Record updated."
                                        },
                                        "record": {
                                            "$ref": "#/components/schemas/Elasticdemo"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Record not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Record not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Validation errors."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/inspire": {
            "get": {
                "tags": [
                    "General"
                ],
                "summary": "Get an inspirational quote",
                "description": "Returns a random quote from the Artisan command inspire",
                "operationId": "726eeba6b87ffbbfc82fbe7eb09dcf95",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "quote": {
                                            "description": "The inspirational quote",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/delete-record/{id}": {
            "delete": {
                "tags": [
                    "Record"
                ],
                "summary": "Delete a record from Elasticdemo table.",
                "description": "Delete a record from Elasticdemo table",
                "operationId": "c682a66efa404deff7f2dc8bf566d73d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the record to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Record deleted successfully"
                    },
                    "404": {
                        "description": "Record not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/delete-all-records": {
            "delete": {
                "tags": [
                    "Record"
                ],
                "summary": "Delete all records from the Elasticdemo table",
                "operationId": "7ae05aec50222c4633062c876b32bc6f",
                "responses": {
                    "204": {
                        "description": "All records have been deleted successfully"
                    }
                }
            }
        },
        "/api/seed-records": {
            "get": {
                "tags": [
                    "Record"
                ],
                "summary": "Insert fake data into elasticdemos table",
                "description": "Populates the elasticdemos table with fake data using Laravel's Model Factories.",
                "operationId": "4176ae5099fc2f71f3e9cb4711fcafbe",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Seeder executed successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/gen-docs": {
            "get": {
                "tags": [
                    "Swagger"
                ],
                "summary": "Generate swagger documentation",
                "description": "Returns artisan output of l5-swagger:generate",
                "operationId": "ba81f890ab5135f6efc33164ee73d09d",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "quote": {
                                            "description": "output artisan",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Elasticdemo": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 33
                    },
                    "name": {
                        "description": "Name",
                        "type": "string",
                        "example": "Alanna Hill Jr.s"
                    },
                    "street": {
                        "description": "Address",
                        "type": "string",
                        "example": "82258 Larue Walk Suite 407"
                    },
                    "number": {
                        "type": "string",
                        "maxLength": 10,
                        "example": "2953"
                    },
                    "code": {
                        "type": "string",
                        "maxLength": 10,
                        "example": "01819"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-04-23T23:23:17.000000Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-04-23T23:26:11.000000Z"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Elasticdemo"
                }
            }
        },
        "responses": {
            "200": {
                "description": "Returns the future weather forecast for the specified city.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {}
                        }
                    }
                }
            }
        },
        "parameters": {
            "city": {
                "name": "city",
                "in": "query",
                "description": "City name to retrieve the forecast for. Defaults to Aveiro if not specified.",
                "required": false,
                "schema": {
                    "type": "string",
                    "example": "London"
                }
            }
        }
    }
}